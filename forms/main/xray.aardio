import win.ui;
import fonts.fontAwesome;
/*DSG{{*/
var frmXray = win.form(text="winXray ";right=959;bottom=591;bgcolor=16777215)
frmXray.add(
btnEditPac={cls="plus";text="编辑PAC";left=332;top=366;right=438;bottom=396;align="left";db=1;dr=1;font=LOGFONT(h=-13);iconStyle={align="left";font=LOGFONT(h=-13;name='FontAwesome');padding={left=12}};iconText='\uF1C4';notify=1;textPadding={left=30};z=7};
btnImportServerFromClipBd={cls="plus";text="批量导入链接";left=459;top=366;right=592;bottom=396;align="left";db=1;dr=1;font=LOGFONT(h=-13);iconStyle={align="left";font=LOGFONT(h=-13;name='FontAwesome');padding={left=12}};iconText='\uF196 ';notify=1;textPadding={left=30};z=8};
btnTcping={cls="plus";text="检测并连接最快服务器";left=735;top=366;right=941;bottom=398;align="left";bgcolor=11580047;border={radius=4};db=1;dr=1;font=LOGFONT(h=-13);iconStyle={align="left";font=LOGFONT(h=-13;name='FontAwesome');padding={left=18}};iconText='\uF012';notify=1;textPadding={left=42};z=3};
chkAutoTest={cls="plus";text="异常自动重连 ";left=598;top=366;right=729;bottom=396;align="left";db=1;dr=1;font=LOGFONT(h=-13);iconStyle={align="left";font=LOGFONT(h=-13;name='FontAwesome');padding={left=12}};iconText='\uF0C8';notify=1;textPadding={left=30};z=9};
edit={cls="edit";left=6;top=405;right=953;bottom=585;bgcolor=0;color=16777215;db=1;dl=1;dr=1;edge=1;hscroll=1;multiline=1;vscroll=1;z=2};
listview={cls="listview";left=4;top=5;right=954;bottom=358;db=1;dl=1;dr=1;dt=1;edge=1;fullRow=1;gridLines=1;z=1};
radioProxy={cls="radiobutton";text="全局代理";left=129;top=369;right=226;bottom=395;bgcolor=16777215;db=1;dl=1;font=LOGFONT(h=-13);z=4};
radioProxyDirect={cls="radiobutton";text="不使用代理";left=14;top=369;right=120;bottom=395;bgcolor=16777215;db=1;dl=1;font=LOGFONT(h=-13);z=6};
radioProxyPac={cls="radiobutton";text="PAC代理";left=234;top=369;right=321;bottom=395;bgcolor=16777215;db=1;dl=1;font=LOGFONT(h=-13);z=5}
)
/*}}*/

frmXray.listview.insertColumn("类型",100) 
frmXray.listview.insertColumn("服务器",160) 
frmXray.listview.insertColumn("端口",70) 
frmXray.listview.insertColumn("加密",90) 
frmXray.listview.insertColumn("协议",50) 
frmXray.listview.insertColumn("备注",190) 
frmXray.listview.insertColumn("响应速度",80) 
frmXray.listview.insertColumn("状态",-1) 
frmXray.show();

import config;
import xray.core; 
var currentOutboundIndex,currentOutboundAddress;
var activeOutbound = function(outboundIndex,outboundAddress,enableRetry){
    if(!outboundIndex && !outboundAddress){
    	outboundIndex,outboundAddress = currentOutboundIndex,currentOutboundAddress;
    	if(!outboundIndex && !outboundAddress) return;
    }
    
    var outbound = config.proxy.outbounds[outboundIndex];
    if(!outbound){
    	return ; 
    } 
    
	var currentTesting = false;
	if( ! xray.core.isInboundPortChanged() ){
	 	currentTesting = currentOutboundIndex == outboundIndex && currentOutboundAddress == outboundAddress
	}
	 
	var startTesting = currentTesting;
	if(!startTesting){
		var started,err = xray.core.restart(frmXray.edit,outbound);
		startTesting = started;
		if(err){
			frmXray.edit.print("启动 Xray 错误：",err);
			return false;
		}
	}

	if( startTesting  ){
		currentOutboundIndex,currentOutboundAddress = outboundIndex,outboundAddress;
		frmXray.autoTesting = true;
		
		..thread.invoke( 
			function(frmXray,outboundIndex,outboundAddress,port,enableRetry,currentTesting){
				import web.rest.client;
				var restClient = web.rest.client(,"SOCKS=127.0.0.1:"+port);
				restClient._http.setTimeouts(1000,2000,2000);
				restClient.get("https://www.google.com/generate_204");
				var lastStatusCode = restClient.lastStatusCode;
				
 				
				if( lastStatusCode == 204 ){
					frmXray.onStartXrayComplete(outboundIndex,currentTesting);
					return;	
				}
				restClient.close();
				
				import wsock.tcp.socks5Client;
				for(i=1;2;1){ 
					sleep(100);
					
					var client;
					for(i=1;5;1){
						sleep(1000);
						client = wsock.tcp.socks5Client("127.0.0.1",port); 
						if(client)break;
					}
					
					if(!client){
						continue;
					};

					client.setTimeouts(1000,1000); 
					if(client.connect("www.google.com",80) ){
						
						var sendData =/***********
GET /  HTTP/1.1
Host: www.google.com
Connection: close
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64)
Accept: */*;  
Accept-Language: zh-CN,zh; 
Accept-Charset:utf-8;  
***********/
						client.write( sendData + '\r\n\r\n' )
						var rep = client.read(9);
						client.close();
						 
						if(outboundAddress!=frmXray.listview.getItemText(outboundIndex,2)){
							return;
						}
					
						if( rep && ..string.startWith(rep,"HTTP/1.1 ") ){
							frmXray.onStartXrayComplete(outboundIndex,currentTesting);
							return;	
						} 
					}
				}
				frmXray.onStartXrayFailed(outboundIndex,enableRetry);
			},frmXray,outboundIndex,outboundAddress,xray.core.socksProxyPort,enableRetry,currentTesting
		)

		return true;
	}	
}

var autoUpdateSubscriptionTimerId; 
var autoUpdateSubscription = function(...){
  	..win.clearTimeout(autoUpdateSubscriptionTimerId); 
  	autoUpdateSubscriptionTimerId = ..win.setTimeout(function(...){
  		autoUpdateSubscriptionTimerId = null;
  		
  		import xray.outbounds;
		xray.outbounds.autoUpdateSubscription();
  	},10000,...)
} 

frmXray.onStartXrayComplete = function(outboundIndex,currentTesting){

    if(autoUpdateSubscriptionTimerId){
    	..win.clearTimeout(autoUpdateSubscriptionTimerId); 
    	autoUpdateSubscriptionTimerId = null;
    }
    
	frmXray.listview.ensureVisible(outboundIndex);
	
	for b,v in table.eachIndex(config.proxy.outbounds){
		frmXray.listview.setItemText("",b,8);
	}
	
	frmXray.autoTesting = false;
	frmXray.listview.setItemText("活动服务器：正常",outboundIndex,8);
	frmXray.listview.activeOutboundIndex = outboundIndex;

	var address  = frmXray.listview.getItemText(outboundIndex,2);
	if(!currentTesting) frmXray.edit.print("已切换到服务器：",address);

	if(frmXray.listview.getItemText(outboundIndex,7)=="不可用"){
		frmXray.listview.setItemText("...",outboundIndex,7);
	}
		
	frmXray.onTcpingReturn = function(){};
	frmXray.btnTcping.disabledText = null;
	frmXray.validOutbounds = {};
	
	..publish("activeOutbound",address);
}

subscribe("activeOutbound",function(address){
    ..globalActiveOutbound = address;
} )

frmXray.onStartXrayFailed = function(outboundIndex,enableRetry){

    ..publish("activeOutbound",false);
    autoUpdateSubscription();
    
	frmXray.listview.ensureVisible(outboundIndex);
	if(frmXray.listview.activeOutboundIndex==outboundIndex){
		frmXray.listview.activeOutboundIndex=null;
	}
	
	if(enableRetry){
		if(#frmXray.validOutbounds){
			var next = table.shift(frmXray.validOutbounds);
			activeOutbound(next[1],next[2],#frmXray.validOutbounds);
			frmXray.listview.setItemText("异常,测试下一个...",outboundIndex,8);
			frmXray.edit.print("服务器异常：",frmXray.listview.getItemText(outboundIndex,2)); 
			frmXray.edit.print("正在尝试连接：",next[2]); 	
		}
		else {
			frmXray.btnTcping.oncommand();
		}
	}
	else {
		frmXray.listview.setItemText("活动服务器：异常",outboundIndex,8);
		frmXray.edit.print("已切换到服务器：",frmXray.listview.getItemText(outboundIndex,2)); 
		frmXray.autoTesting = false;
	} 
	
	frmXray.btnTcping.disabledText = null;
}

var tcping = function(frmXray,outboundIndex,outbound){ 
	import wsock.tcp.client; 
	var timeout = 0; 
	var failed = 0;
	for(i=1;8;1){ 
		sleep(1);
		
		var client = wsock.tcp.client(); 	
		var tickBegin = time.tick(); 
		if(client.connectTimeout(outbound.address,tonumber(outbound.port),3)){
			var ret = client.send("."); 
			client.close();
			
			if( ret != 1){ 
				frmXray.listview.setItemText("不可用",outboundIndex,7);
				frmXray.onTcpingReturn(outboundIndex,outbound.address,false);
				return;
			}
			timeout =  timeout + (time.tick() - tickBegin);
		}
		else {
			client.close();
			
			failed++;
			if(failed>1){
				frmXray.listview.setItemText("不可用",outboundIndex,7);
				frmXray.onTcpingReturn(outboundIndex,outbound.address,false);
				return;	
			} 
		} 
	}
	
	frmXray.onTcpingReturn(outboundIndex,outbound.address,true);
	frmXray.listview.setItemText(math.round(timeout / (8-failed) / 1000,2)+"秒",outboundIndex,7);
};

import sysProxy; 
import style;
frmXray.btnTcping.skin(style.primaryButton);
frmXray.btnTcping.oncommand = function(id,event){
	frmXray.listview.activeOutboundIndex = null;
	var items = frmXray.listview.items;
	if(#items){
		frmXray.btnTcping.disabledText = {'\uF254';'\uF251';'\uF252';'\uF253';'\uF250'}
		if(!xray.core.getPath()){
			frmXray.btnTcping.disabledText = null;
			frmXray.msgErr("下载 xray.exe 失败")
			return;
		}
		
		var faieldCount = 0;
		frmXray.onTcpingReturn = function(outboundIndex,address,succeeded){
			if(address!=frmXray.listview.getItemText(outboundIndex,2)){
				return; 
			}
			
			if(config.proxy.outbounds[outboundIndex].autoConnect === false ){
				faieldCount++;
				if(faieldCount==#items) frmXray.autoTesting = false;
				return;
			}
			
			if(succeeded){
				frmXray.validOutbounds = {}
				frmXray.onTcpingReturn = function(outboundIndex,address,succeeded){
					if(address!=frmXray.listview.getItemText(outboundIndex,2)){
						return; 
					}
					
					if(config.proxy.outbounds[outboundIndex].autoConnect === false ){
						faieldCount++;
						if(faieldCount==#items) frmXray.autoTesting = false;
						return;
					}
					
					if(succeeded) table.push(frmXray.validOutbounds,{outboundIndex;address});
					else{
						faieldCount++;
						if(faieldCount==#items) frmXray.autoTesting = false;
					}
				}
				activeOutbound(outboundIndex,address,#items>1);	
			}
			else{
				faieldCount++;
				if(faieldCount==#items) frmXray.autoTesting = false;
			}
		}
			
		thread.createSuspended(true);
		
		var handles = {};
		var outbounds = config.proxy.outbounds;
		var lenPing = 0;
		var listview = frmXray.listview;
		for(i=1;#items;1){
			if(outbounds[i].autoConnect===false){
				listview.setItemText("禁止测速",i,7);
				continue;
			}
			
			if(lenPing>config.proxy.maxTestServers){
				frmXray.edit.print("测速服务器数超出设定上限:"+config.proxy.maxTestServers + "，您可在「配置 / 高级设置」中修改此值。")
				break;
			}
			lenPing++;
 
			listview.setItemText("...",i,7);
			listview.setItemText("",i,8);
			
			var h = thread.create(tcping,frmXray,i,config.proxy.outbounds[i]);	 
			table.push(handles,h);
		} 
		thread.createSuspended(false);
		
		for(i=1;#handles;1){
			var h = handles[i];	 
			thread.resume(h);
			raw.closehandle(h);
		} 
		
		if(#handles) ..thread.waitOne(handles);
		frmXray.btnTcping.disabledText = null;
	}
	else {
		if(id) frmXray.msgWarn("请先添加服务器")
		xray.core.stop();
	}
}

import xray.core;
import xray.pacServer;
frmXray.onDestroy = function(){
	xray.core.stop();
	xray.pacServer.stop();
}

var pingThread = function( ip,frmXray ) {
    import icmp.ping; 
    var ping = icmp.ping(); 
    
    for(i=1;4;1){
        if( ping.perform(ip) ){
             frmXray.edit.print(ip,string.format( "Reply from %s: bytes=%d time=%dms TTL=%d"
                , ping.ip , #ping.requestData  , ping.echoReply.roundTripTime , ping.echoReply.options.ttl ) ); 
        }  
        else {
        	frmXray.edit.print(ip,"Request timed out");
        }
        
    }
} 

import xray.outbounds;
frmXray.listview.onnotify = function(id,code,ptr){
	select(code) {
		case 0xFFFFFFF4/*_NM_CUSTOMDRAW*/ {
			var lvcd = frmXray.listview.getNotifyCustomDraw(code,ptr);
			if( lvcd.nmcd.dwDrawStage == 0x10001/*_CDDS_ITEMPREPAINT*/)
				return 0x20/*_CDRF_NOTIFYSUBITEMDRAW*/
			elseif( lvcd.nmcd.dwDrawStage == 1/*_CDDS_PREPAINT*/ ){
				return 0x20/*_CDRF_NOTIFYITEMDRAW*/;
			}
			elseif( lvcd.nmcd.dwDrawStage == ( 0x10001/*_CDDS_ITEMPREPAINT*/ | 0x20000/*_CDDS_SUBITEM*/) ){ 
				//注意这里 iSubItem 的索引自0开始( 其他函数通常自1开始 )
				lvcd.clrText = lvcd.nmcd.dwItemSpec % 2 ? 0x373737 : 0;
				lvcd.clrTextBk = lvcd.nmcd.dwItemSpec % 2 ? 0xFFFFFF : 0xF5F5F5;
				
				var item = lvcd.nmcd.dwItemSpec+1;
				if(lvcd.iSubItem==7){ 
					if(frmXray.listview.activeOutboundIndex=item){ 
						lvcd.clrTextBk = 0x8AFFC3
					} 
				}
				elseif(lvcd.iSubItem==6){ 
					if(..config.proxy.outbounds[item].autoConnect===false){ 
						lvcd.clrText = 0xCCCCCC;
					} 
				}
				lvcd.update()
				
				return 0/*_CDRF_DODEFAULT*/
			}
		}
		case  0xFFFFFFFD/*_NM_DBLCLK*/ {
			var nm = frmXray.listview.getNotifyMessage(code,ptr);
			if( nm ){
				frmXray.onTcpingReturn = function(i){}
				frmXray.btnTcping.disabledText = null;
				
				for b,v in table.eachIndex(config.proxy.outbounds){
					frmXray.listview.setItemText("",b,8);
				}
				activeOutbound(nm.iItem,frmXray.listview.getItemText(nm.iItem,2),false); 
			}
		}
		case 0xFFFFFFFB/*_NM_RCLICK*/  {
			var x,y = win.getCursorPos();
			var nm = frmXray.listview.getNotifyMessage(code,ptr);
			if(!nm) return;
			;
			var currentIdx = nm.iItem;
			if(!currentIdx){
				var popmenu = win.ui.popmenu(frmXray);
				
				popmenu.add("自剪贴板批量导入分享链接、订阅源",function(id){
					frmXray.btnImportServerFromClipBd.oncommand();
				});
					
				popmenu.add("重置为默认服务器列表",
					function(id){
						..config.__loadDefaultOutbounds();
						publish("outbounds.updateConfigJson");
						publish("uiCommand.restartXrayCore");
					}
				);
				
				popmenu.add('自动清除「不可用」服务器',function(id){
					for(i=#config.proxy.outbounds;1;-1){ 
						if(frmXray.listview.getItemText(i,7)=="不可用"){
							..table.remove(config.proxy.outbounds,i);
							frmXray.listview.delItem(i);
						} 
					}
						
					publish("outbounds.updateConfigJson"); 
				});	
				
				popmenu.add('清空服务器列表',function(id){
					config.proxy.outbounds = ..table.array();
					frmXray.listview.clear();
					publish("outbounds.updateConfigJson");
				});
				
				popmenu.add()
				popmenu.add('立即更新所有订阅源',function(id){
					xray.outbounds.updateSubscription();
				});
				
				popmenu.popup(x,y,true);
				return;
			}
			
			var selectedItems = frmXray.listview.selected; 
			var popmenu = win.ui.popmenu(frmXray);
			
			if(#selectedItems==1){
				popmenu.add('设为活动服务器( 鼠标双击 )',function(id){
					if(currentIdx){
						frmXray.onTcpingReturn = function(i){}
						frmXray.btnTcping.disabledText = null;
						
						for b,v in table.eachIndex(config.proxy.outbounds){
							frmXray.listview.setItemText("",b,8);
						}
						activeOutbound(currentIdx,frmXray.listview.getItemText(currentIdx,2),false)
					}
				});
			}
			
			if(#selectedItems>0){	
				var autoConnect = config.proxy.outbounds[currentIdx].autoConnect!==false; 
				var id = popmenu.add('允许自动测速并连接',function(id){
					if(currentIdx){
						for(i=#selectedItems;1;-1){ 
							var item = selectedItems[i];
							if(autoConnect === false){
								config.proxy.outbounds[item].autoConnect = null;
								frmXray.listview.setItemText("",item,7);
							}
							else {
								config.proxy.outbounds[item].autoConnect = false;
								frmXray.listview.setItemText("禁止测速",item,7);
							}
						}
					}
				});
				popmenu.check(id,autoConnect,0/*_MF_BYCOMMAND*/); 
			}
			
			if(#selectedItems==1){	
				popmenu.add();
				popmenu.add('SSH 登录服务器',function(id){
					if(currentIdx){
						if(_STUDIO_INVOKED){
    						frmXray.msgErr("请在发布后运行此功能");
    						return;
    					}
						import process;
						process.execute(io._exepath,"/sshLogin root@" 
							+ config.proxy.outbounds[currentIdx].address + ":" 
							+ (config.proxy.outbounds[currentIdx].sshPort||22));
					}
				});
				
				popmenu.add();
				popmenu.add('生成二维码',function(id){
					if(currentIdx){
						import xray.outbounds;
						import win.clip;
						
						var str = xray.outbounds.exportSharedLinks({config.proxy.outbounds[currentIdx]});
						if(str){ 
							var frmChild = frmXray.loadForm("\forms\main\tools\qr.aardio");
							frmChild.createQrCode(str);
							frmChild.show();
						}  
					}
				});
				
				popmenu.add('复制服务器分享链接',function(id){
					if(currentIdx){
						import xray.outbounds;
						import win.clip;
						
						var str = xray.outbounds.exportSharedLinks({config.proxy.outbounds[currentIdx]});
						if(str){ 
							win.clip.write(str); 
							frmXray.edit.print("已复制链接:",str);
						}  
					}
				});
				
				popmenu.add('复制服务器地址',function(id){
					if(currentIdx){
						import win.clip;
						win.clip.write(config.proxy.outbounds[currentIdx].address + ":" + config.proxy.outbounds[currentIdx].port); 
						frmXray.edit.print("已复制服务器地址:",config.proxy.outbounds[currentIdx].address + ":" + config.proxy.outbounds[currentIdx].port);
					}
				});
				popmenu.add('复制服务器 JSON 配置',function(id){
					if(currentIdx){
						import win.clip;
						import web.json; 
						var str = web.json.stringify(config.proxy.outbounds[currentIdx],true,false);
						win.clip.write(str);
						frmXray.edit.print(str);
					}
				});
				popmenu.add();
				
				var toolMenu = win.ui.popmenu(frmXray)
				toolMenu.add('本机 Ping 检测',function(id){
					if(currentIdx){
						thread.invoke(pingThread,config.proxy.outbounds[currentIdx].address,frmXray)
					}
				});
				 
				toolMenu.add('全球范围 Ping 检测 ...',function(id){
					if(currentIdx){
						process.openUrl("http://ping.pe/" + config.proxy.outbounds[currentIdx].address)
					}
				});
				
				toolMenu.add('全球范围端口检测 ...',function(id){
					if(currentIdx){
						process.openUrl("http://port.ping.pe/" + config.proxy.outbounds[currentIdx].address + ":" + config.proxy.outbounds[currentIdx].port)
					}
				});
				
				toolMenu.add('在线路由跟踪检测 ...',function(id){
					if(currentIdx){
						process.openUrl("https://www.boce.com/traceroute/" + config.proxy.outbounds[currentIdx].address)
					}
				});
				
				toolMenu.add('本机路由检测',function(id){
					if(currentIdx){
						import process;
						process.execute("cmd.exe","/k tracert " + config.proxy.outbounds[currentIdx].address);
					}
				});
				
				popmenu.add("服务器检测工具",toolMenu)
				
				
				popmenu.add();
				
				if(config.proxy.outbounds[currentIdx].port == 443 && config.proxy.outbounds[currentIdx].tls){
					popmenu.add('浏览 HTTPS 主页 ...',function(id){
						if(currentIdx){
							process.openUrl("https" ++ "://" + config.proxy.outbounds[currentIdx].address); 
						}
					});	
					popmenu.add();
				}
			}
			
			popmenu.add()
			popmenu.add("自剪贴板批量导入分享链接、订阅源",function(id){
				frmXray.btnImportServerFromClipBd.oncommand();
			});
			
			popmenu.add("重置为默认服务器列表",
				function(id){
					..config.__loadDefaultOutbounds();
					publish("outbounds.updateConfigJson");
					publish("uiCommand.restartXrayCore");
				}
			);
			
			popmenu.add('自动清除「不可用」服务器',function(id){
				for(i=#config.proxy.outbounds;1;-1){ 
					if(frmXray.listview.getItemText(i,7)=="不可用"){
						..table.remove(config.proxy.outbounds,i);
						frmXray.listview.delItem(i);
					} 
				}
					
				publish("outbounds.updateConfigJson"); 
			});	
				
			popmenu.add('清空服务器列表',function(id){
				if(currentIdx){
					config.proxy.outbounds = ..table.array();
					frmXray.listview.clear();
					publish("outbounds.updateConfigJson");
				}
			});
			
			popmenu.add()
			popmenu.add('立即更新所有订阅源',function(id){
				if(currentIdx){
					xray.outbounds.updateSubscription();
				}
			});
			
			popmenu.add()
			popmenu.add('删除服务器',function(id){
				if(currentIdx){
					for(i=#selectedItems;1;-1){
  						var item = selectedItems[i] 
						frmXray.listview.delItem(item);
						..table.remove(config.proxy.outbounds,item);
					}
					 
					publish("outbounds.updateConfigJson");
				}
			});
			
			popmenu.popup(x,y,true);
		}
	}
}

subscribe("uiCommand.restartXrayCore",function(){ 
	config.proxy.outbounds.fields = {"protocol";"address";"port";"security";"network";"ps";}
	
	var outbounds = config.proxy.outbounds;
	for(i=#outbounds;1;-1){
		if(type(outbounds[i])!="table"){
			table.remove(outbounds,i);
		}
	}
	frmXray.listview.setTable(outbounds);	 
	
	frmXray.btnTcping.oncommand();
} )

import process;
if(#config.proxy.outbounds){
    config.proxy.outbounds.fields = {"protocol";"address";"port";"security";"network";"ps";}
    
	var outbounds = config.proxy.outbounds;
	for(i=#outbounds;1;-1){
		if(type(outbounds[i])!="table"){
			table.remove(outbounds,i);
		}
	}
	frmXray.listview.setTable(outbounds);	
	
	frmXray.setTimeout( 
		function(){
			publish("uiCommand.restartXrayCore");	
		},1000
	);	
}

subscribe("sysProxy.modeChanged",function(mode){
	frmXray.radioProxyPac.checked = false;
	frmXray.radioProxy.checked = false;
	frmXray.radioProxyDirect.checked = false;
	
	if(mode = "pac"){
		frmXray.radioProxyPac.checked = true;
	}
	elseif(mode = "proxy"){
		frmXray.radioProxy.checked = true;
	}
	else{
		frmXray.radioProxyDirect.checked = true;
	}
} )
publish("sysProxy.modeChanged",config.proxy.mode);

import sysProxy;
var switchProxyMode = function(){
	if(frmXray.radioProxyPac.checked){
		sysProxy.switchToPacMode();	
	}
	elseif(frmXray.radioProxy.checked){
		sysProxy.switchToGlobalMode();	
	}
	else {
		sysProxy.switchToDirectMode();	
	}  
}
frmXray.radioProxyPac.oncommand = switchProxyMode;
frmXray.radioProxy.oncommand = switchProxyMode;
frmXray.radioProxyDirect.oncommand = switchProxyMode;

import win.dlg.message; 
frmXray.btnEditPac.skin(style.plainButton)
frmXray.btnEditPac.oncommand = function(id,event){
	if(frmPac && win.isWindow(frmPac.hwnd)){
		if( win.isIconic(frmPac.hwnd) ) win.show(frmPac.hwnd,9/*_SW_RESTORE*/ );
		if( !win.isVisible(frmPac.hwnd) ) win.show(frmPac.hwnd,0x1/*_SW_NORMAL*/ );
		win.setForeground(frmPac.hwnd)
		return;
	}

	frmPac = ..mainForm.loadForm("\forms\main\pac.aardio");
	frmPac.show();
}
subscribe("uiCommand.showPacForm",function(...){
	frmXray.btnEditPac.oncommand();
} )

subscribe("uiCommand.print",function(...){
	frmXray.edit.print(...);
} )

import xray.outbounds;
frmXray.btnImportServerFromClipBd.skin(style.plainButton)
frmXray.btnImportServerFromClipBd.oncommand = function(id,event){
	var outbounds = xray.outbounds.importFromClipboard();
	if(#outbounds){
		..table.append(config.proxy.outbounds,outbounds); 
		publish("uiCommand.restartXrayCore");
		publish("outbounds.updateConfigJson");
		frmXray.msgOk("已成功导入" + #outbounds + "个服务器",1200); 
		return; 
	}

	frmXray.msgFrown('未导入服务器！\r\n请先复制以下格式文本（自动清除其中的无效内容）：\r\n\r\n1、一行或多行（忽略无效行）分享链接或服务器JSON配置。\r\n支持 vmess://，vless://，ss://，trojan://， trojan-go:// 等通用分享链接。\r\n\r\n2、包含多个服务器配置的JSON数组。\r\n\r\n3、单个 http:// 或 https:// 开头的通用订阅源地址。\r\n订阅源地址支持直接使用github项目文件地址（网址含raw或blob目录名）。\r\n订阅源可以BASE64编码或明文返回以上1、2条规定的配置或分享链接。')
}

var testTimerId;
frmXray.chkAutoTest.oncommand = function(id,event){
	if(testTimerId){
		frmXray.clearInterval(testTimerId);
	}

	config.proxy.test = frmXray.chkAutoTest.checked;
	if(!config.proxy.test) return;

	testTimerId = frmXray.setInterval( 
		config.proxy.testInterval*1000,function(){
			if( frmXray.autoTesting ) return;
			frmXray.autoTesting = true;

			activeOutbound(,,true);
			return config.proxy.testInterval*1000;
		} 
	)
}

if(config.proxy.test){
	frmXray.chkAutoTest.checked = true;
	frmXray.chkAutoTest.oncommand();
}

frmXray.chkAutoTest.skin(style.checkBox);

frmXray.enableDpiScaling();
win.loopMessage();