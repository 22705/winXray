import fonts.fontAwesome;
import win.ui;
/*DSG{{*/
var winform = win.form(text="aardio form";right=912;bottom=793;bgcolor=16777215)
winform.add(
advancedConfig={cls="\forms\main\config\advancedConfig.aardio";left=9;top=29;right=902;bottom=739;bgcolor=16777215;db=1;dl=1;dr=1;dt=1;edge=1;z=10};
btnUpdate={cls="plus";text="更新服务器配置";left=687;top=753;right=856;bottom=784;align="left";bgcolor=11580047;db=1;dr=1;font=LOGFONT(h=-13);iconStyle={align="left";font=LOGFONT(h=-13;name='FontAwesome');padding={left=22}};iconText='\uF0C7';notify=1;textPadding={left=40};z=5};
editCoreConfig={cls="edit";left=9;top=29;right=902;bottom=739;db=1;dl=1;dr=1;dt=1;edge=1;hide=1;hscroll=1;multiline=1;vscroll=1;z=8};
editOutbounds={cls="edit";left=9;top=29;right=902;bottom=739;db=1;dl=1;dr=1;dt=1;edge=1;hscroll=1;multiline=1;vscroll=1;z=7};
lbTip={cls="static";text="可在下面输入多行服务器分享链接，或JSON数组( 点击字段名会显示用法说明 )：";left=11;top=9;right=899;bottom=29;color=3947580;dl=1;dr=1;dt=1;font=LOGFONT(h=-13);transparent=1;z=6};
navAdvancedConfig={cls="plus";text="代理端口 / 高级配置";left=359;top=750;right=493;bottom=782;border={top=1;color=-16744448};db=1;dl=1;z=9};
navCoreConfig={cls="plus";text="Xray配置 ( JSON )";left=162;top=750;right=293;bottom=782;border={top=1;color=-16744448};db=1;dl=1;z=2};
navOutbounds={cls="plus";text="服务器配置( JSON )";left=31;top=750;right=162;bottom=782;border={top=1;color=-16744448};db=1;dl=1;z=1};
navRight={cls="plus";left=493;top=750;right=762;bottom=751;bgcolor=16777215;border={color=-16744448};db=1;dl=1;dr=1;forecolor=32768;linearGradient=180;z=3};
navSubscription={cls="plus";text="订阅";left=293;top=750;right=359;bottom=782;border={top=1;color=-16744448};db=1;dl=1;z=12};
plus={cls="plus";left=9;top=750;right=31;bottom=751;border={color=-16744448};db=1;dl=1;forecolor=32768;z=4};
subscription={cls="\forms\main\config\subscription.aardio";left=9;top=29;right=902;bottom=739;bgcolor=16777215;db=1;dl=1;dr=1;dt=1;edge=1;z=11}
)
/*}}*/

import config;
import web.json;
import win.ui.tabs;
var tbs = win.ui.tabs(winform.navOutbounds,winform.navCoreConfig,winform.navSubscription,winform.navAdvancedConfig);
tbs.margin = 0;

tbs.skin({
	foreground={
		active=0xFFFFFFFF;
		default=0x00FFFFFF;
		hover=0xFFCCCCCC;
	};
	checked={
		foreground={ 
			default=0x00FFFFFF; 
		};
		border = { 
			default = {left=1;right=1;bottom=1;color=0xFF008000} 
		}; 
	}
});

tbs.onSelchange = function(idx,strip,form){
	if(idx==1){
		winform.editOutbounds.hide = false;
		winform.advancedConfig.hide = true;
		winform.editCoreConfig.hide = true;
		winform.subscription.hide = true;

		winform.lbTip.text = `可在下面输入多行服务器分享链接，或JSON数组( 点击字段名会显示用法说明 )：`;
		winform.btnUpdate.text = "更新服务器配置";
		winform.btnUpdate.hide = false;
	}
	elseif(idx==2) {
		winform.editCoreConfig.hide = false;
		winform.editOutbounds.hide = true;
		winform.advancedConfig.hide = true;
		winform.subscription.hide = true;
		
		winform.lbTip.text = `inbounds[0]，inbounds[1]必须为入站socks、http 代理，outbounds[0] 会转换为出站服务器数组： `
		winform.btnUpdate.text = "更新Xray配置 "
		winform.btnUpdate.hide = false;
	}	
	elseif(idx==3) {
		
		winform.subscription.hide = false;
		winform.editOutbounds.hide = true;
		winform.advancedConfig.hide = true;
		winform.editCoreConfig.hide = true; 

		winform.lbTip.text = `` 
		winform.btnUpdate.hide = true;
		winform.subscription.loadSubscriptionsOnce();
	}	
	else {
		winform.advancedConfig.hide = false;
		winform.editOutbounds.hide = true; 
		winform.subscription.hide = true;
		winform.editCoreConfig.hide = true;
		winform.lbTip.text = ``
		winform.btnUpdate.hide = true;
	}	
}
tbs.selIndex = 1;

import style;
winform.btnUpdate.skin(style.primaryButton);
winform.btnUpdate.oncommand = function(id,event){
	winform.btnUpdate.disabledText = {'\uF254';'\uF251';'\uF252';'\uF253';'\uF250'};

	if(tbs.selIndex==1){
		if(..string.match(winform.editOutbounds.text,"%\[\]")){
			var cfg,err = web.json.tryParse(winform.editOutbounds.text);
			if(!cfg){
				winform.editOutbounds.showErrorTip(,string.concat("JSON语法错误 ",err));
				winform.btnUpdate.disabledText = null;
				return;
			}
			
			if(cfg){
				cfg = xray.outbounds.validAll(cfg)	
			}
			config.proxy.outbounds = cfg : ..table.array();
		}
		else {
			var outbounds = xray.outbounds.importFromString(winform.editOutbounds.text);
			config.proxy.outbounds = outbounds : ..table.array(); 
			winform.editOutbounds.text = web.json.stringifyArray(outbounds,true,false,true);
		}
		
		config.proxy.save();
		winform.editOutbounds.modified = false;
		publish("uiCommand.restartXrayCore",cfg)    	
	}
	elseif(tbs.selIndex==2) {
		var cfg,err = web.json.tryParse(winform.editCoreConfig.text);
		if(type(cfg)!==type.table){
			winform.editCoreConfig.showErrorTip(,string.concat("JSON语法错误 ",err));
			winform.btnUpdate.disabledText = null;
			return;
		}

		if(cfg.outbounds[[1]][["tag"]]!="proxy"){
			winform.msgErr(`outbounds[0]必须指定为{"tag":"proxy"}`);
			winform.btnUpdate.disabledText = null;
			return; 
		}

		if(type(cfg.inbounds[[1]][["listen"]])!="string"){
			winform.msgErr(`inbounds[0].listen必须指定为SOCKS代理监听IP或0.0.0.0`);
			winform.btnUpdate.disabledText = null;
			return; 
		}

		if(type(cfg.inbounds[[1]][["port"]])!="number"){
			winform.msgErr(`inbounds[0].port必须指定为SOCKS代理监听端口`);
			winform.btnUpdate.disabledText = null;
			return; 
		} 

		if(type(cfg.inbounds[[2]][["listen"]])!="string"){
			winform.msgErr(`inbounds[1].listen必须指定为HTTP代理监听IP或0.0.0.0`);
			winform.btnUpdate.disabledText = null;
			return; 
		}

		if(type(cfg.inbounds[[2]][["port"]])!="number"){
			winform.msgErr(`inbounds[1].port必须指定为HTTP代理监听端口`);
			winform.btnUpdate.disabledText = null;
			return; 
		} 
		
		config.core.default = cfg;
		config.core.save();
		publish("uiCommand.restartXrayCore",cfg)   
		publish("config.core.changed");
	} 

	win.delay(500);
	winform.btnUpdate.disabledText = null;
	winform.msgOk("配置已更新",1200);
}


import xray.outbounds;
winform.editOutbounds.enablePopMenu(function(){
	if(tbs.selIndex==1){
		var strEditBounds = string.trim(winform.editOutbounds.text);
		var menu = {
			{ /*---分隔线---*/ };
			{ "自剪贴板导入 vmess/vless/trojan/ss 链接或订阅源";
				function(id){ 
					
					var outbounds = xray.outbounds.importFromClipboard();
					if(#outbounds){ 
						var json = strEditBounds;
						if( (!#json) || ..string.match(json,"%\[\]")){
							var cfg,err = ..table.array();
							if(#json){
								cfg,err= web.json.tryParse(strEditBounds);
								if(!cfg){
									winform.editOutbounds.showErrorTip(,string.concat("当前配置存在JSON语法错误 ",err));
									return;
								}	
							} 
							
							..table.append(cfg,outbounds);
							winform.editOutbounds.text = ..web.json.stringifyArray(cfg,true,false,true);
						}
						else {
							var str = xray.outbounds.exportSharedLinks(outbounds);
							if(#strEditBounds){
								winform.editOutbounds.text = strEditBounds+ '\r\n' + str;
							}
							else {
								winform.editOutbounds.text = str;
							} 
						}
						
						winform.msgOk("已成功导入" + #outbounds + "个服务器,请点击「更新设置」启用新配置。",1200);
						winform.editOutbounds.modified = true;
						winform.editOutbounds.setFocus();
						return; 
					}
		
					winform.msgFrown('未导入服务器！\r\n请先复制以下格式文本（自动清除其中的无效内容）：\r\n\r\n1、一行或多行（忽略无效行）分享链接或服务器JSON配置。\r\n支持 vmess://，vless://，ss://，trojan://， trojan-go:// 等通用分享链接。\r\n\r\n2、包含多个服务器配置的JSON数组。\r\n\r\n3、单个 http:// 或 https:// 开头的通用订阅源地址。\r\n订阅源地址支持直接使用github项目文件地址（网址含raw或blob目录名）。\r\n订阅源可以BASE64编码或明文返回以上1、2条规定的配置或分享链接。')
				} 
			};  
		}
		
		if( (!#strEditBounds) || ..string.match(strEditBounds,"%\[\]")){
			menu[3] = { "更新订阅源";
				function(id){ 
					var cfg,err = ..table.array();
					
					var json = strEditBounds;
					if(#json){
						cfg,err = web.json.tryParse(strEditBounds);
						if(!cfg){
							winform.editOutbounds.showErrorTip(,string.concat("JSON语法错误 ",err));
							return;
						}
					}
					 
					var subscribeUrls = {}
					for(i=#cfg;1;-1){
						var outbound = cfg[i] 
						if(outbound.subscribeUrl){
							subscribeUrls[outbound.subscribeUrl] = true;	
						}
					}
					
					if(!table.count(subscribeUrls)){
						import win.clip;
						var clibStr = win.clip.read();
						if( ..string.startWith(clibStr,"http://") || ..string.startWith(clibStr,"https://")  ){
							subscribeUrls[clibStr] = true;
						}
						else {
							winform.msgWarn('当前配置不包含来自订阅源的服务器,\n请先复制订阅源网址到剪贴板!');
							return;
						} 
					}
					 
					var count = 0;
					for(url,v in subscribeUrls){ 
						var outbounds = xray.outbounds.importFromString(url);
						if(#outbounds){
							for(i=#cfg;1;-1){
								var outbound = cfg[i] 
								if(outbound.subscribeUrl==url){
									..table.remove(	cfg,i );
								}
							}
							
							count = count + #outbounds;
							..table.append(cfg,outbounds);
						}
					}
					
					winform.editOutbounds.text = ..web.json.stringifyArray(cfg,true,false,true);
						
					winform.msgOk("已成功刷新" + count + "个服务器,请点击「更新设置」启用新配置。",1200);
					winform.editOutbounds.modified = true;
					winform.editOutbounds.setFocus();
					return;   
				} 
			};
		}
		
		if(..string.match(strEditBounds,"%\[\]")){	
			menu[4] = {}	
			menu[5] = { "转换为 vmess、vless、trojan、trojan-go、ss 分享链接";
				function(id){ 
					var cfg,err = web.json.tryParse(strEditBounds);
					if(!cfg){
						winform.editOutbounds.showErrorTip(,string.concat("JSON语法错误 ",err));
						return;
					}
		
					var str = xray.outbounds.exportSharedLinks(cfg);
					if(str){ 
						winform.editOutbounds.text = str;
						winform.editOutbounds.modified = true;
					} 
				} 
			}; 
			menu[6] = { "转换为 Base64 订阅源";
				function(id){ 
					var cfg,err = web.json.tryParse(strEditBounds);
					if(!cfg){
						winform.editOutbounds.showErrorTip(,string.concat("JSON语法错误 ",err));
						return;
					}
		
					var str = xray.outbounds.exportSharedLinks(cfg);
					if(str){ 
						import crypt;
						winform.editOutbounds.text = ..crypt.encodeBin(str);
						winform.editOutbounds.modified = true;
					} 
				} 
			};
		}
		elseif( #strEditBounds ) {
			menu[3] = {}
			
			menu[4] = { "转换为 JSON";
				function(id){
					import web.json;
					var outbounds = xray.outbounds.importFromString(strEditBounds);
					if(outbounds){ 
						winform.editOutbounds.text = web.json.stringifyArray(outbounds,true,false,true);
						winform.editOutbounds.modified = true;
					} 
				} 
			}; 
		} 
		
		table.push(menu,{ /*---分隔线---*/ });
		
		table.push(menu,{ "打开配置文件(JSON)";
			function(id){
				import fsys.dlg;
				var path = fsys.dlg.open("*.json|*.json||","打开 json 文件",,winform)
				if(path){
					winform.editOutbounds.text = string.load(path);
					winform.editOutbounds.modified = true;
				}
			} 
		}); 
		
		table.push(menu,{ "另存为配置文件(JSON)";
			function(id){
				import fsys.dlg;
				var path = fsys.dlg.save("*.json|*.json||","另存为 json 文件",,winform)
				if(path){
					var str = web.json.stringifyArray( 
						config.proxy.outbounds,true,false,true
					)
					
					string.save(path,str )
				}
			} 
		}); 
		
		table.push(menu,{ "另存为默认服务器列表(JSON)";
			function(id){
				var str = web.json.stringifyArray( 
					config.proxy.outbounds,true,false,true
				)
				
				string.save("/xray-core/winXray-default-servers.json",str );
				winform.msgOk("已存为默认服务器列表 /xray-core/winXray-default-servers.json",1000)
			} 
		}); 
				
		table.push(menu,{ /*---分隔线---*/ });
		if(winform.editOutbounds.modified){
			table.push(menu,{ "恢复为当前使用的服务器列表(JSON)";
				function(id){
					winform.btnUpdate.disabledText = {'\uF254';'\uF251';'\uF252';'\uF253';'\uF250'}
					winform.editOutbounds.text = web.json.stringifyArray( 
						config.proxy.outbounds,true,false,true
					)
					winform.editOutbounds.modified = false;
					
					win.delay(500);
					winform.btnUpdate.disabledText = null;
				} 
			}); 
		}
		
		table.push(menu,{ "重置为默认服务器列表(JSON)";
			function(id){
				winform.btnUpdate.disabledText = {'\uF254';'\uF251';'\uF252';'\uF253';'\uF250'}
				..config.__loadDefaultOutbounds();
				winform.editOutbounds.modified = false;
				publish("uiCommand.restartXrayCore",cfg);
				
				winform.btnUpdate.disabledText = null;
			} 
		}); 
		
		table.push(menu,{ "清空服务器列表";
			function(id){
				winform.editOutbounds.text = "[]";
				winform.editOutbounds.modified = true;
			} 
		}); 
		
		if(  ..string.match(winform.editOutbounds.text,"%\[\]")){

		table.push(menu,{ /*---分隔线---*/ });
			table.push(menu,{ "插入配置字段";{
				{ "代理服务协议:protocol";
					function(id){
						winform.editOutbounds.selText = '"protocol":"vless",'
					} 
				};
				{ "SSH管理端口:sshPort";
					function(id){
						winform.editOutbounds.selText = '"sshPort":22,'
					} 
				};
				{ "代理服务器地址:address";
					function(id){
						winform.editOutbounds.selText = '"address":"",'
					} 
				};
				{ "端口:port";
					function(id){
						winform.editOutbounds.selText = '"port":443,'
					} 
				};
				{ "网络协议:network";
					function(id){
						winform.editOutbounds.selText = '"network":"tcp",'
					} 
				};
				{ "服务器密码:id";
					function(id){
						winform.editOutbounds.selText = '"id":"",'
					} 
				};
				{ "加密方式:security";
					function(id){
						winform.editOutbounds.selText = '"security":"auto",'
					} 
				};
				{ "启用TLS:tls";
					function(id){
						winform.editOutbounds.selText = '"tls":"xtls",'
					} 
				};
				{ "允许忽略证书:allowInsecure";
					function(id){
						winform.editOutbounds.selText = '"allowInsecure":true,'
					} 
				};
				{ "TLS服务器名:sni";
					function(id){
						winform.editOutbounds.selText = '"sni":"",'
					} 
				};
				{ "启用TLS:tls";
					function(id){
						winform.editOutbounds.selText = '"tls":"xtls",'
					} 
				};
				{ "流控:flow";
					function(id){
						winform.editOutbounds.selText = '"flow":"xtls-rprx-direct",'
					} 
				};
				{ "多路复用最大连接:concurrency";
					function(id){
						winform.editOutbounds.selText = '"concurrency":4,'
					} 
				};
		
				{ "伪装类型:type";
					function(id){
						winform.editOutbounds.selText = '"type":"http",'
					} 
				};
				{ "备注:ps";
					function(id){
						winform.editOutbounds.selText = '"ps":"",'
					} 
				};
				{ "请求主机名:host";
					function(id){
						winform.editOutbounds.selText = '"host":"",'
					} 
				};
				{ "请求路径:path";
					function(id){
						winform.editOutbounds.selText = '"path":"/",'
					} 
				};
				{ "绑定的订阅网址:subscribeUrl";
					function(id){
						winform.editOutbounds.selText = '"subscribeUrl":"https://",'
					} 
				};
				{ "允许自动测试并连接:autoConnect";
					function(id){
						winform.editOutbounds.selText = '"autoConnect":false,'
					} 
				};
				{ "备注:ps";
					function(id){
						winform.editOutbounds.selText = '"ps":"",'
					} 
				};
			}}); 
		}
		
		return menu;
	} 
})

winform.editCoreConfig.enablePopMenu({ 
	{ /*---分隔线---*/ };
	{ "重置为默认 Xray 配置";
		function(id){  
			config.__resetDefaultCore();
			winform.editCoreConfig.text = web.json.stringify( 
				config.core.default,true
			)
		} 
	}; 
} )

subscribe("outbounds.updateConfigJson",function(){
	if(winform.editOutbounds.modified){
		return;
	}
	
	winform.editOutbounds.text = web.json.stringifyArray( 
		config.proxy.outbounds,true,false,true
	)
	
	winform.editOutbounds.modified = false;
} )

winform.editOutbounds.text = web.json.stringifyArray( 
		config.proxy.outbounds,true,false,true
) : "[]"
winform.editOutbounds.modified = false;

subscribe("config.inbounds.changed",function(){
	if(winform.editCoreConfig.modified){
		return;
	}
	
	winform.editCoreConfig.text = web.json.stringify( 
		config.core.default,true
	)
	
	winform.editCoreConfig.modified = false;
} )
winform.editCoreConfig.text = web.json.stringify( 
	config.core.default,true
)

var editOutboundsTip = {
	address = {"代理服务器地址";"值可以是域名或者IP地址"};
	alterId = {"额外ID";"仅用于VMESS协议，与服务器一致即可"};
	aid = {"额外ID(alterId)";"数值,仅用于VMESS协议，与服务器一致即可"};
	network = {"传输协议(network)";"可选值为tcp,ws等"};
	net = {"传输协议(network)";"可选值为tcp,ws等"};
	type = {"伪装类型";"可选值为none,http等"}; 
	ps = {"备注";"备注"}; 
	tls = {"是否启用TLS";"可选值为tls,xtls或空值,vless协议省略时默认值为tls"}; 
	path = {"请求路径";"用于ws,http等协议指定请求路径"}; 
	id = {"密码";"服务器密码"}; 
	host = {"主机名";"用于指定http,ws等协议请求头中的主机名"}; 
	protocol = {"协议";"可选值为 vmess,vless,shadowsocks,trojan,trojan-go 之一"}; 
	port = {"端口";"服务器端口,数值"}; 
	security = {"加密方式";"可省略,vmess协议默认为auto,vless协议默认为none"};
	sni = {"TLS服务器名";"TLS客户端请求中的服务器名字段,如果不指定则默认取host或address字段值。"}; 
	flow = {"流控";"目前仅用于选择 XTLS 的算法,省略时默认值为xtls-rprx-direct"}; 
	concurrency = {"Mux多路复用:最大并发连接数";"最小值1，最大值1024，特殊值-1，不加载mux模块。缺省由winXray根据连接协议自动设定此值。"}; 
}

winform.editOutbounds.wndproc = function(hwnd,message,wParam,lParam){
	if(message == 0x202/*_WM_LBUTTONUP*/){
		var lineIndex = winform.editOutbounds.lineFromChar();
		if(lineIndex == winform.editOutbounds.preLineIndex){
			return; 
		}
		winform.editOutbounds.preLineIndex = lineIndex;
		
		var line = winform.editOutbounds.lineText();
		var n,v = string.match(line,`^\s*\"(\w+)\"\s*\:\s*(%"")[\,\s]*$`); 
		if( !n ) n,v = string.match(line,`^\s*\"(\w+)\"\s*\:\s*(\d+)[\,\s]*$`);
		
		if(editOutboundsTip[n]){
			winform.editOutbounds.showInfoTip(editOutboundsTip[n][1],editOutboundsTip[n][2])
		}
	} 
}

winform.editOutbounds.limit = 0;
winform.editCoreConfig.limit = 0;

winform.enableDpiScaling();
winform.show();
win.loopMessage();
return winform;
